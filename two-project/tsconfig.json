{
  "compilerOptions": {
    /* Basic Options */
    "target": "es6" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017','ES2018' or 'ESNEXT'. */,
    "module": "commonjs" /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */,
    "lib": [
      "dom",
      "es6",
      "dom.iterable",
      "scripthost"
    ] /* Specify library files to be included in the compilation. */,
    // "allowJs": true,                       /* Allow javascript files to be compiled. */
    // "checkJs": true,                       /* Report errors in .js files. */
    // "jsx": "preserve",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
    // "declaration": true,                   /* Generates corresponding '.d.ts' file. */
    // "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */
    // "sourceMap": true,                     /* Generates corresponding '.map' file. */
    // "outFile": "./",                       /* Concatenate and emit output to single file. */
    // outDir : 컴파일 후 생성되는 js파일이 생성될 폴더명
    "outDir": "./dist" /* Redirect output structure to the directory. */,
    // rootDir : 시작하는 루트 폴더
    "rootDir": "./src" /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */,
    // "composite": true,                     /* Enable project compilation */
    // 컴파일러가 주석을 제거하고,
    "removeComments": true /* Do not emit comments to output. */,
    // "noEmit": true,                        /* Do not emit outputs. */
    // "importHelpers": true,                 /* Import emit helpers from 'tslib'. */
    // "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    // "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */
    // 컴파일러가 오류가 있는 파일을 컴파일하지 않고, 오류 메시지만 출력하게 됩니다.
    "noEmitOnError": true,

    /* Strict Type-Checking Options */
    // strict 옵션을 적용하여 엄격한 타입 체크 및 추가 규칙을 적용합니다. 이는 코드의 타입 안정성을 높이고 일부 잠재적인 오류를 방지하는 데 도움이 됩니다.

    // strict 옵션은 다음과 같은 하위 옵션들을 포함하고 있습니다:

    // strictNullChecks: null 및 undefined 값을 엄격하게 다룹니다.
    // strictFunctionTypes: 함수 타입의 매개변수에 대한 공변성을 적용합니다.
    // strictPropertyInitialization: 클래스의 프로퍼티가 초기화되지 않았을 때 오류를 방지합니다.
    // strictBindCallApply: bind, call, apply 함수 호출에 대한 타입 검사를 수행합니다.
    // strictImplicitReturns: 모든 함수의 반환 값이 있는지 검사합니다.
    // strictNullChecks: null 및 undefined 값을 엄격하게 다룹니다.
    // strictPropertyInitialization: 클래스의 프로퍼티가 초기화되지 않았을 때 오류를 방지합니다.
    // strictBindCallApply: bind, call, apply 함수 호출에 대한 타입 검사를 수행합니다.
    // strictFunctionTypes: 함수 타입의 매개변수에 대한 공변성을 적용합니다.
    // strictNumericChecks: 숫자형 타입의 연산에 엄격한 검사를 수행합니다.
    // strictTypePredicates: 타입 가드(predicate)에 대한 엄격한 검사를 수행합니다.
    // esModuleInterop: CommonJS 모듈과의 상호 운용성을 개선하기 위해 import 및 export 구문을
    "strict": true /* Enable all strict type-checking options. */,
    // "noImplicitAny": false,                 /* Raise error on expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,              /* Enable strict null checks. */
    // "strictFunctionTypes": true,           /* Enable strict checking of function types. */
    // "strictBindCallApply": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */
    // "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */
    // "noImplicitThis": true,                /* Raise error on 'this' expressions with an implied 'any' type. */
    // "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */

    /* Additional Checks */
    "noUnusedLocals": true /* Report errors on unused locals. */,
    "noUnusedParameters": true /* Report errors on unused parameters. */,
    "noImplicitReturns": true /* Report error when not all code paths in function return a value. */,
    // "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */

    /* Module Resolution Options */
    // "moduleResolution": "node",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    // "baseUrl": "./",                       /* Base directory to resolve non-absolute module names. */
    // "paths": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
    // "typeRoots": [],                       /* List of folders to include type definitions from. */
    // "types": [],                           /* Type declaration files to be included in compilation. */
    // "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "esModuleInterop": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
    // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */

    /* Source Map Options */
    // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */
    // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

    /* Experimental Options */
    // "experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */
    // "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */
  },
  // exclude : 컴파일 대상을 제외하는 옵션
  "exclude": [
    "node_modules" // would be the default
  ]
}
